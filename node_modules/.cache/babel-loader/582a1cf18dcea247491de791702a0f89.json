{"ast":null,"code":"import _classCallCheck from \"/Users/dzakharov/Desktop/code/clickygame/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dzakharov/Desktop/code/clickygame/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/dzakharov/Desktop/code/clickygame/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/dzakharov/Desktop/code/clickygame/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/dzakharov/Desktop/code/clickygame/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/dzakharov/Desktop/code/clickygame/src/pages/Game.js\";\nimport React, { Component } from \"react\"; //import Card from \"../components/Card\";\n\nvar Discover =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Discover, _Component);\n\n  function Discover() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Discover);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Discover)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      image: \"\",\n      match: false,\n      matchCount: 0\n    };\n    return _this;\n  }\n\n  _createClass(Discover, [{\n    key: \"componentDidMount\",\n    // When the component mounts, load the next dog to be displayed\n    value: function componentDidMount() {} //this.loadNextDog();\n    //   handleBtnClick = event => {\n    //     // Get the data-value of the clicked button\n    //     const btnType = event.target.attributes.getNamedItem(\"data-value\").value;\n    //     // Clone this.state to the newState object\n    //     // We'll modify this object and use it to set our component's state\n    //     const newState = { ...this.state };\n    //     if (btnType === \"pick\") {\n    //       // Set newState.match to either true or false depending on whether or not the dog likes us (1/5 chance)\n    //       newState.match = 1 === Math.floor(Math.random() * 5) + 1;\n    //       // Set newState.matchCount equal to its current value or its current value + 1 depending on whether the dog likes us\n    //       newState.matchCount = newState.match\n    //         ? newState.matchCount + 1\n    //         : newState.matchCount;\n    //     } else {\n    //       // If we thumbs down'ed the dog, we haven't matched with it\n    //       newState.match = false;\n    //     }\n    //     // Replace our component's state with newState, load the next dog image\n    //     this.setState(newState);\n    //     this.loadNextDog();\n    //   };\n    //   loadNextDog = () => {\n    //     API.getRandomDog()\n    //       .then(res =>\n    //         this.setState({\n    //           image: res.data.message\n    //         })\n    //       )\n    //       .catch(err => console.log(err));\n    //   };\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, \"Make New Friends\"), React.createElement(\"h3\", {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, \"Thumbs up on any pups you'd like to meet!\"), React.createElement(Card, {\n        image: this.state.image,\n        handleBtnClick: this.handleBtnClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }), React.createElement(\"h1\", {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"Made friends with \", this.state.matchCount, \" pups so far!\"), React.createElement(Alert, {\n        style: {\n          opacity: this.state.match ? 1 : 0\n        },\n        type: \"success\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, \"Yay! That Pup Liked You Too!!!\"));\n    }\n  }]);\n\n  return Discover;\n}(Component);\n\nexport default Game;","map":{"version":3,"sources":["/Users/dzakharov/Desktop/code/clickygame/src/pages/Game.js"],"names":["React","Component","Discover","state","image","match","matchCount","handleBtnClick","opacity","Game"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;IAEMC,Q;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,KAAK,EAAE,EADD;AAENC,MAAAA,KAAK,EAAE,KAFD;AAGNC,MAAAA,UAAU,EAAE;AAHN,K;;;;;;AAMR;wCACoB,CAEnB,C,CADC;AAGJ;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;6BAEW;AACP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAI,QAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADF,EAEE;AAAI,QAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAFF,EAKE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE,KAAKH,KAAL,CAAWC,KAAxB;AAA+B,QAAA,cAAc,EAAE,KAAKG,cAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALF,EAME;AAAI,QAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACqB,KAAKJ,KAAL,CAAWG,UADhC,kBANF,EASE,oBAAC,KAAD;AAAO,QAAA,KAAK,EAAE;AAAEE,UAAAA,OAAO,EAAE,KAAKL,KAAL,CAAWE,KAAX,GAAmB,CAAnB,GAAuB;AAAlC,SAAd;AAAqD,QAAA,IAAI,EAAC,SAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CATF,CADF;AAeD;;;;EA9DoBJ,S;;AAiEvB,eAAeQ,IAAf","sourcesContent":["import React, { Component } from \"react\";\n//import Card from \"../components/Card\";\n\nclass Discover extends Component {\n  state = {\n    image: \"\",\n    match: false,\n    matchCount: 0\n  };\n\n  // When the component mounts, load the next dog to be displayed\n  componentDidMount() {\n    //this.loadNextDog();\n  }\n\n//   handleBtnClick = event => {\n//     // Get the data-value of the clicked button\n//     const btnType = event.target.attributes.getNamedItem(\"data-value\").value;\n//     // Clone this.state to the newState object\n//     // We'll modify this object and use it to set our component's state\n//     const newState = { ...this.state };\n\n//     if (btnType === \"pick\") {\n//       // Set newState.match to either true or false depending on whether or not the dog likes us (1/5 chance)\n//       newState.match = 1 === Math.floor(Math.random() * 5) + 1;\n\n//       // Set newState.matchCount equal to its current value or its current value + 1 depending on whether the dog likes us\n//       newState.matchCount = newState.match\n//         ? newState.matchCount + 1\n//         : newState.matchCount;\n//     } else {\n//       // If we thumbs down'ed the dog, we haven't matched with it\n//       newState.match = false;\n//     }\n//     // Replace our component's state with newState, load the next dog image\n//     this.setState(newState);\n//     this.loadNextDog();\n//   };\n\n//   loadNextDog = () => {\n//     API.getRandomDog()\n//       .then(res =>\n//         this.setState({\n//           image: res.data.message\n//         })\n//       )\n//       .catch(err => console.log(err));\n//   };\n\n  render() {\n    return (\n      <div>\n        <h1 className=\"text-center\">Make New Friends</h1>\n        <h3 className=\"text-center\">\n          Thumbs up on any pups you'd like to meet!\n        </h3>\n        <Card image={this.state.image} handleBtnClick={this.handleBtnClick} />\n        <h1 className=\"text-center\">\n          Made friends with {this.state.matchCount} pups so far!\n        </h1>\n        <Alert style={{ opacity: this.state.match ? 1 : 0 }} type=\"success\">\n          Yay! That Pup Liked You Too!!!\n        </Alert>\n      </div>\n    );\n  }\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}