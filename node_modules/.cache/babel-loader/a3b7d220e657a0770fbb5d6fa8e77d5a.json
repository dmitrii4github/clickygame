{"ast":null,"code":"import _toConsumableArray from \"/Users/dzakharov/Desktop/code/clickygame/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/dzakharov/Desktop/code/clickygame/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dzakharov/Desktop/code/clickygame/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/dzakharov/Desktop/code/clickygame/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/dzakharov/Desktop/code/clickygame/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/dzakharov/Desktop/code/clickygame/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/dzakharov/Desktop/code/clickygame/src/pages/Game.js\";\nimport React, { Component } from \"react\";\nimport Card from \"../components/Card\";\n\nvar Game =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Game, _Component);\n\n  function Game() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Game);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Game)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      image_id: [{\n        index: 0,\n        clicked: false\n      }, {\n        index: 1,\n        clicked: false\n      }, {\n        index: 2,\n        clicked: false\n      }],\n      match: false,\n      score: 0,\n      topScore: 0\n    };\n\n    _this.handleBtnClick = function (event, i) {\n      console.log(\"here's i:\");\n      console.log(i);\n\n      if (_this.state.image_id[i].clicked === false) {\n        _this.setState({\n          score: _this.state.score + 1\n        });\n\n        _this.updateItem(i, true);\n      } else {\n        console.log(\"You clicked twice on the same image. You lost!\");\n      } //     // Get the data-value of the clicked button\n      //     const btnType = event.target.attributes.getNamedItem(\"data-value\").value;\n      //     // Clone this.state to the newState object\n      //     // We'll modify this object and use it to set our component's state\n      //     const newState = { ...this.state };\n      //     if (btnType === \"pick\") {\n      //       // Set newState.match to either true or false depending on whether or not the dog likes us (1/5 chance)\n      //       newState.match = 1 === Math.floor(Math.random() * 5) + 1;\n      //       // Set newState.matchCount equal to its current value or its current value + 1 depending on whether the dog likes us\n      //       newState.matchCount = newState.match\n      //         ? newState.matchCount + 1\n      //         : newState.matchCount;\n      //     } else {\n      //       // If we thumbs down'ed the dog, we haven't matched with it\n      //       newState.match = false;\n      //     }\n      //     // Replace our component's state with newState, load the next dog image\n      //     this.setState(newState);\n      //     this.loadNextDog();\n\n    };\n\n    return _this;\n  }\n\n  _createClass(Game, [{\n    key: \"componentDidMount\",\n    // When the component mounts, load the next dog to be displayed\n    value: function componentDidMount() {//this.loadNextDog();\n    }\n  }, {\n    key: \"updateItem\",\n    value: function updateItem(id, itemAttributes) {\n      var index = this.state.image_id.findIndex(function (x) {\n        return x.id === id;\n      });\n\n      if (index === -1) {} else this.setState({\n        image_id: [].concat(_toConsumableArray(this.state.image_id.slice(0, index)), [Object.assign({}, this.state.image_id[index].clicked, itemAttributes)], _toConsumableArray(this.state.image_id.slice(index + 1)))\n      });\n    }\n  }, {\n    key: \"shuffle\",\n    //   loadNextDog = () => {\n    //     API.getRandomDog()\n    //       .then(res =>\n    //         this.setState({\n    //           image: res.data.message\n    //         })\n    //       )\n    //       .catch(err => console.log(err));\n    //   };\n    value: function shuffle(a) {\n      for (var i = a.length - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1));\n        var _ref = [a[j], a[i]];\n        a[i] = _ref[0];\n        a[j] = _ref[1];\n      }\n\n      return a;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var new_image_id = this.shuffle(this.state.image_id); //this.setState({image_id: new_image_id});\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, \"Clicky Game!\"), React.createElement(\"h3\", {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, \"Click on an image to earn points, but don't click on any more than once!\"), React.createElement(\"h1\", {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, \"Score: \", this.state.score, \" Top score: \", this.state.topScore), React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-xs-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(Card, {\n        image_id: new_image_id[0].index,\n        handleBtnClick: function handleBtnClick(e) {\n          _this2.handleBtnClick(e, new_image_id[0].index);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"col-xs-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"col-xs-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(Card, {\n        image_id: new_image_id[1].index,\n        handleBtnClick: this.handleBtnClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"col-xs-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"col-xs-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(Card, {\n        image_id: new_image_id[2].index,\n        handleBtnClick: this.handleBtnClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"col-xs-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Game;\n}(Component);\n\nexport default Game;","map":{"version":3,"sources":["/Users/dzakharov/Desktop/code/clickygame/src/pages/Game.js"],"names":["React","Component","Card","Game","state","image_id","index","clicked","match","score","topScore","handleBtnClick","event","i","console","log","setState","updateItem","id","itemAttributes","findIndex","x","slice","Object","assign","a","length","j","Math","floor","random","new_image_id","shuffle","e"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Card from \"../components/Card\";\n\nclass Game extends Component {\n  state = {\n    image_id: [{index: 0, clicked: false}, {index: 1, clicked: false} , {index: 2, clicked: false}],\n    match: false,\n    score: 0,\n    topScore: 0\n  };\n\n  // When the component mounts, load the next dog to be displayed\n  componentDidMount() {\n    //this.loadNextDog();\n  }\n\n  updateItem(id, itemAttributes) {\n    var index = this.state.image_id.findIndex(x=> x.id === id);\n    if (index === -1)\n      {}\n    else\n      this.setState({\n        image_id: [\n           ...this.state.image_id.slice(0,index),\n           Object.assign({}, this.state.image_id[index].clicked, itemAttributes),\n           ...this.state.image_id.slice(index+1)\n        ]\n      });\n  }\n\nhandleBtnClick = (event, i) => {\n  console.log(\"here's i:\");\n  console.log(i);\n  if (this.state.image_id[i].clicked === false) {    \n    this.setState({score: this.state.score+1});\n    this.updateItem(i, true);\n  } else {\n    console.log(\"You clicked twice on the same image. You lost!\");\n  }\n\n//     // Get the data-value of the clicked button\n//     const btnType = event.target.attributes.getNamedItem(\"data-value\").value;\n//     // Clone this.state to the newState object\n//     // We'll modify this object and use it to set our component's state\n//     const newState = { ...this.state };\n\n//     if (btnType === \"pick\") {\n//       // Set newState.match to either true or false depending on whether or not the dog likes us (1/5 chance)\n//       newState.match = 1 === Math.floor(Math.random() * 5) + 1;\n\n//       // Set newState.matchCount equal to its current value or its current value + 1 depending on whether the dog likes us\n//       newState.matchCount = newState.match\n//         ? newState.matchCount + 1\n//         : newState.matchCount;\n//     } else {\n//       // If we thumbs down'ed the dog, we haven't matched with it\n//       newState.match = false;\n//     }\n//     // Replace our component's state with newState, load the next dog image\n//     this.setState(newState);\n//     this.loadNextDog();\n};\n\n//   loadNextDog = () => {\n//     API.getRandomDog()\n//       .then(res =>\n//         this.setState({\n//           image: res.data.message\n//         })\n//       )\n//       .catch(err => console.log(err));\n//   };\n\n  shuffle(a) {\n    for (let i = a.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [a[i], a[j]] = [a[j], a[i]];\n    }\n    return a;\n  }\n\n  render() {\n    var new_image_id = this.shuffle(this.state.image_id);\n    //this.setState({image_id: new_image_id});\n    return (\n      <div>\n        <h1 className=\"text-center\">Clicky Game!</h1>\n        <h3 className=\"text-center\">\n        Click on an image to earn points, but don't click on any more than once!   \n        </h3>\n        <h1 className=\"text-center\">\n          Score: {this.state.score} Top score: {this.state.topScore}\n        </h1>\n        <div className=\"row\">\n\n          <div className=\"col-xs-2\">\n            <Card image_id={new_image_id[0].index} handleBtnClick={(e) => {this.handleBtnClick(e, new_image_id[0].index)}} />\n          </div>\n          <div className=\"col-xs-2\">\n          </div>\n          <div className=\"col-xs-2\">\n            <Card image_id={new_image_id[1].index} handleBtnClick={this.handleBtnClick} />\n          </div>\n          <div className=\"col-xs-2\">\n          </div>\n          <div className=\"col-xs-2\">\n            <Card image_id={new_image_id[2].index} handleBtnClick={this.handleBtnClick} />\n          </div>\n          <div className=\"col-xs-2\">\n          </div>\n        </div>\n        {/* <row>\n        <Card image={this.state.image} handleBtnClick={this.handleBtnClick} />\n        <Card image={this.state.image} handleBtnClick={this.handleBtnClick} />\n        </row>\n        <br/>\n        <Card image={this.state.image} handleBtnClick={this.handleBtnClick} /> */}\n        {/* <Alert style={{ opacity: this.state.match ? 1 : 0 }} type=\"success\">\n          Yay! That Pup Liked You Too!!!\n        </Alert> */}\n      </div>\n    );\n  }\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}